{"version":3,"file":"FeaturePhoto-72b5d52d.js","sources":["../../src/components/FeaturePhoto/FeaturePhoto.svelte"],"sourcesContent":["<!-- @component `FeaturePhoto` [Read the docs.](https://reuters-graphics.github.io/graphics-components/?path=/docs/components-FeaturePhoto--default) -->\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import Block from '../Block/Block.svelte';\n  import type { ContainerWidth } from '../@types/global';\n  import PaddingReset from '../PaddingReset/PaddingReset.svelte';\n\n  /**\n   * Photo src\n   * @type {string}\n   * @required\n   */\n  export let src: string;\n  /**\n   * Photo altText\n   * @type {string}\n   * @required\n   */\n  export let altText: string;\n  /**\n   * Add an id to target with custom CSS.\n   * @type {string}\n   */\n  export let id: string = '';\n  /**\n   * Add extra classes to target with custom CSS.\n   * @type {string}\n   */\n  let cls: string = '';\n  export { cls as class };\n  /**\n   * Caption below the photo\n   * @type {string}\n   */\n  export let caption: string;\n  /**\n   * Height of the photo placeholder when lazy-loading\n   */\n  export let height: number = 100;\n  /**\n   * Width of the container, one of: normal, wide, wider, widest or fluid\n   */\n  export let width: ContainerWidth = 'normal';\n\n  /**\n   * Set a different width for the text within the text well, for example,\n   * \"normal\" to keep the title, description and notes inline with the rest\n   * of the text well. Can't ever be wider than `width`.\n   * @type {string}\n   */\n  export let textWidth: ContainerWidth | null = 'normal';\n\n  /**\n   * Whether to lazy load the photo using the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)\n   */\n  export let lazy: boolean = false;\n  /** Set Intersection Observer [rootMargin](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#rootmargin) `top` when lazy loading. */\n  export let top = 0;\n  /** Set Intersection Observer [rootMargin](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#rootmargin) `bottom` when lazy loading. */\n  export let bottom = 0;\n  /** Set Intersection Observer [rootMargin](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#rootmargin) `left` when lazy loading. */\n  export let left = 0;\n  /** Set Intersection Observer [rootMargin](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#rootmargin) `right` when lazy loading. */\n  export let right = 0;\n\n  let intersecting = false;\n  let container;\n  const intersectable = typeof IntersectionObserver !== 'undefined';\n\n  onMount(() => {\n    if (!lazy) return;\n    if (intersectable) {\n      const rootMargin = `${bottom}px ${left}px ${top}px ${right}px`;\n\n      const observer = new IntersectionObserver(\n        (entries) => {\n          intersecting = entries[0].isIntersecting;\n          if (intersecting) {\n            observer.unobserve(container);\n          }\n        },\n        {\n          rootMargin,\n        }\n      );\n\n      observer.observe(container);\n      return () => observer.unobserve(container);\n    }\n  });\n</script>\n\n<Block width=\"{width}\" class=\"photo fmy-6 {cls}\" id=\"{id}\">\n  <figure\n    bind:this=\"{container}\"\n    aria-label=\"media\"\n    class=\"w-full flex flex-col relative\"\n  >\n    {#if !lazy || (intersectable && intersecting)}\n      <img class=\"w-full my-0\" src=\"{src}\" alt=\"{altText}\" />\n    {:else}\n      <div class=\"placeholder w-full\" style=\"{`height: ${height}px;`}\"></div>\n    {/if}\n    {#if caption}\n      <PaddingReset containerIsFluid=\"{width === 'fluid'}\">\n        <Block width=\"{textWidth}\" class=\"notes w-full fmy-0\">\n          <figcaption>\n            {caption}\n          </figcaption>\n        </Block>\n      </PaddingReset>\n    {/if}\n    {#if !altText}\n      <div class=\"alt-warning absolute text-xxs py-1 px-2\">altText</div>\n    {/if}\n  </figure>\n</Block>\n\n<style lang=\"scss\">\n  .placeholder {\n    background-color: #ccc;\n  }\n\n  div.alt-warning {\n    background-color: red;\n    color: white;\n    top: 0;\n    right: 0;\n  }\n</style>\n"],"names":["ctx","insert","target","div","anchor","attr","img","img_src_value","dirty","paddingreset_changes","figcaption","create_if_block_2","create_if_block_1","create_if_block","figure","src","$$props","altText","id","cls","caption","height","width","textWidth","lazy","top","bottom","left","right","intersecting","container","intersectable","onMount","rootMargin","observer","entries","$$invalidate","$$value"],"mappings":"2XAqGyDA,EAAM,CAAA,CAAA,KAAA,UAAzDC,EAAsEC,EAAAC,EAAAC,CAAA,kCAAnBJ,EAAM,CAAA,CAAA,wHAF1BA,EAAG,CAAA,CAAA,GAAAK,EAAAC,EAAA,MAAAC,CAAA,YAASP,EAAO,CAAA,CAAA,UAAlDC,EAAsDC,EAAAI,EAAAF,CAAA,0BAAvBJ,EAAG,CAAA,CAAA,+BAASA,EAAO,CAAA,CAAA,+DAKjB,iBAAAA,OAAU,gHAAVQ,EAAA,KAAAC,EAAA,iBAAAT,OAAU,gMAGpCA,EAAO,CAAA,CAAA,UADVC,EAEYC,EAAAQ,EAAAN,CAAA,2BADTJ,EAAO,CAAA,CAAA,qEAFGA,EAAS,CAAA,qJAATA,EAAS,CAAA,kRAQ1BC,EAAiEC,EAAAC,EAAAC,CAAA,mEAf7DJ,EAAI,CAAA,GAAKA,EAAa,EAAA,GAAIA,EAAY,CAAA,EAAAW,wBAKvCX,EAAO,CAAA,GAAAY,EAAAZ,CAAA,KASNA,EAAO,CAAA,GAAAa,EAAA,8IAnBfZ,EAsBQC,EAAAY,EAAAV,CAAA,6IAZDJ,EAAO,CAAA,8FASNA,EAAO,CAAA,8LApBFA,EAAK,CAAA,uBAAuBA,EAAG,CAAA,KAAQA,EAAE,CAAA,2HAAzCA,EAAK,CAAA,gCAAuBA,EAAG,CAAA,cAAQA,EAAE,CAAA,0JAhF3C,IAAAe,CAAW,EAAAC,GAMX,QAAAC,CAAe,EAAAD,EAKf,CAAA,GAAAE,EAAa,EAAE,EAAAF,EAKtB,CAAA,MAAAG,EAAc,EAAE,EAAAH,GAMT,QAAAI,CAAe,EAAAJ,EAIf,CAAA,OAAAK,EAAiB,GAAG,EAAAL,EAIpB,CAAA,MAAAM,EAAwB,QAAQ,EAAAN,EAQhC,CAAA,UAAAO,EAAmC,QAAQ,EAAAP,EAK3C,CAAA,KAAAQ,EAAgB,EAAK,EAAAR,EAErB,CAAA,IAAAS,EAAM,CAAC,EAAAT,EAEP,CAAA,OAAAU,EAAS,CAAC,EAAAV,EAEV,CAAA,KAAAW,EAAO,CAAC,EAAAX,EAER,CAAA,MAAAY,EAAQ,CAAC,EAAAZ,EAEhBa,EAAe,GACfC,QACEC,EAAa,OAAU,qBAAyB,IAEtDC,EAAO,IAAA,IACAR,GACDO,EAAa,CACT,MAAAE,KAAgBP,CAAM,MAAMC,CAAI,MAAMF,CAAG,MAAMG,CAAK,KAEpDM,EAAQ,IAAO,qBAClBC,GAAO,CACNC,EAAA,EAAAP,EAAeM,EAAQ,CAAC,EAAE,cAAc,EACpCN,GACFK,EAAS,UAAUJ,CAAS,IAI9B,WAAAG,CAAU,CAAA,EAId,OAAAC,EAAS,QAAQJ,CAAS,MACbI,EAAS,UAAUJ,CAAS,8CAO/BA,EAASO;;"}